import java.util.*;
import java.io.*;
import java.math.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Collector;
/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Solution {

    public static void main(String args[]) {
        MapAnalyzer mapAnalyzer = new MapAnalyzer();
        Scanner in = new Scanner(System.in);
        int width = in.nextInt();
        int height = in.nextInt();
       // System.out.println("taille: "+width + " " +height);
        List<String> rows = new ArrayList();
        for (int i = 0; i < height; i++) {
            String row = in.next();
           // System.out.println("ligne: "+row);
            rows.add(row);
        }
        try{
            List<String> res = mapAnalyzer.initialiserJeu(rows);
            mapAnalyzer.printrowsArrayCodinggame(res);
         }
         catch(Exception e){ e.printStackTrace();}
    }

}



 class MapAnalyzer {
    int ballenbr = 0;  int trounbr=0; int combinaisoncoupleNbr =0;
    int strategieNumber=0;
    List<String> strategies;

    private List<Trou> resolvedTrous= new ArrayList();
    private ArrayList initialMap;
    private List<List<CouplesBalleTrouCombines.CoupleBalleTrou>> combinaisoncouples;

    public List<String> getPath(Ball balle, List<String> rows, Trou trou) throws ToutRefaireAvecNouveauxCouples {
        List<String> resultRows = new ArrayList<>();
            resultRows = analyseRows(balle, rows,trou);
        if (isHTrouve(resultRows, trou)) return MarkTheTrouHasResolved(trou, resultRows);
        throw new ToutRefaireAvecNouveauxCouples();
    }

    private List<String> MarkTheTrouHasResolved(Trou trou, List<String> resultRows) {
        addTrouToResolvedTrouList(trou);
        return removeThisTrouFromMap(resultRows, trou);
    }

    private void addTrouToResolvedTrouList(Trou trou) {
        this.resolvedTrous.add(trou);
    }

    public boolean isHTrouve(List<String> resultRows, Trou trou){
        if (resultRows.size()==0) return false;
        Integer y = trou.y;
        Integer x = trou.x;
            if(identifie(resultRows,x+1,y)== '<'
                || identifie(resultRows,x-1,y)== '>'
                || identifie(resultRows,x,y-1)== 'v'
                || identifie(resultRows,x,y+1)== '^')
                return true;
        return false;
    }

    public List<Trou> trouveTrous(List<String> resultRows) throws TrouNonTrouveException {
        char h = 'H';
        return trouveCharEtTransformeEnTrous(resultRows, h);
    }
    public List<Trou> trouveLacs(List<String> resultRows) throws TrouNonTrouveException {
        char h = 'X';
        return trouveCharEtTransformeEnTrous(resultRows, h);
    }
    private List<Trou> trouveCharEtTransformeEnTrous(List<String> resultRows, char h) throws TrouNonTrouveException {
        List<Trou> trous = new ArrayList();
        for(int y = 0; y< resultRows.size(); y++){
            for (int x = 0; x< resultRows.get(y).length(); x++)
            {
                if (resultRows.get(y).charAt(x)== h) trous.add(new Trou(new Integer[]{x,y}));
            }
        }
        if (trous.size()==0) throw new TrouNonTrouveException();
        return trous;
    }

    private List<String> removeThisTrouFromMap(List<String> resultRows, Trou trou) {
        resultRows.set(trou.y,changeCharAt(resultRows.get(trou.y),trou.x,"."));
        return resultRows;
    }

    List<String> analyseRows(Ball balle, List<String> rows, Trou trou) throws ToutRefaireAvecNouveauxCouples {
        String chemin ="";
        chemin = rechercheParStrategies(balle, rows, trou);
        ecrireAuPropreLeChemin(balle, rows, chemin);
        return rows;
    }

    private String rechercheParStrategies(Ball balleOriginal, List<String> rowsOriginal, Trou trou) throws ToutRefaireAvecNouveauxCouples {
        List<String> strategieDirection =pickupFirstStrategie();
        Ball balleExperimentee=null;
        List<String> rowsConsequent;
        while(!isToutesLesStrategiesOntJoue()) {
            try {
                BallEtMap ballExperimenteeEtMapConsequent = rechercheMemorisee(balleOriginal, rowsOriginal, trou, strategieDirection);
                balleExperimentee= ballExperimenteeEtMapConsequent.getBalle();
                rowsConsequent = ballExperimenteeEtMapConsequent.getRows();
            } catch (StrategiePerdante e) {
                //System.out.println("Strategie "+strategieNumber+" perdante POUR CETTE BALLE");
                balleExperimentee= e.getBallWithInvalidPaths();
                rowsConsequent=rowsOriginal;
            }
                try {strategieDirection = pickupNextStrategie();}catch(IndexOutOfBoundsException e){break;}
                balleOriginal = Ball.copieExperience(balleExperimentee,balleOriginal);
                //System.out.println("NOUVELLE STRATEGIE NUMERO "+strategieNumber+" POUR CETTE BALLE :"+ strategieDirection);
        }

        String cheminParcouruLePlusCourt = balleExperimentee.getCheminParcouruLePlusCourt();
        if (cheminParcouruLePlusCourt.length()==0) throw new ToutRefaireAvecNouveauxCouples();
        return cheminParcouruLePlusCourt;
    }

    private List<String> pickupFirstStrategie() {
        reinitialiserStrategies();
        List<String> ret = Arrays.asList(strategies.get(strategieNumber).split(","));
        //System.out.println("STRATEGIE: "+strategieNumber+" " +ret);
        return ret;
    }

    public List<String> pickupNextStrategie() throws IndexOutOfBoundsException {
        strategieNumber++;
        if (isToutesLesStrategiesOntJoue()) throw new IndexOutOfBoundsException();
        List<String> ret = Arrays.asList(strategies.get(strategieNumber).split(","));
        //System.out.println("STRATEGIE: "+strategieNumber+" " +ret);
        return ret;
    }

    private boolean isToutesLesStrategiesOntJoue() {
        return strategieNumber >= strategies.size();
    }

    private void ecrireAuPropreLeChemin(Ball balle, List<String> rows, String chemin) {
        for (int i = 0; i< chemin.length(); i++){
            String direction= String.valueOf(chemin.charAt(i));
            ecrireLeChemin(balle, rows, direction);
            changeBallPosition(balle,direction, rows, new Trou());
        }
    }

    private void ecrireLeChemin(Ball balle, List<String> rows, String direction) {
        rows.set(balle.y, changeCharAt( rows.get(balle.y), balle.x, direction));
    }

    public BallEtMap rechercheMemorisee(Ball balleOriginale, List<String> rowsOriginal, Trou trou, List<String> strategieDirections) throws StrategiePerdante {
        //System.out.println("NOUVELLE RECHERCHE MEMORISEE "+balleOriginale + " Trou: "+trou);
        Ball balle=Ball.createNewInstance(balleOriginale);
        ArrayList<String> rowsCopie = new ArrayList(rowsOriginal);
        int iddirections=0;
        while (!isHTrouve(rowsCopie,trou)) {
            if (balle.isTourneEnRond()){
                if (balle.isATrouveChemin()) return new BallEtMap(balle,rowsCopie);
                throw new StrategiePerdante(balle);
            }
            String direction =strategieDirections.get(iddirections);
            while (isBallCanMoove(balle, direction, rowsCopie,trou)) {
                direction = strategieDirections.get(iddirections);
                avanceBalleDansDirection(balle, rowsCopie, direction);
                printChemin(rowsCopie, balle, trou);
                if (isHTrouve(rowsCopie,trou)) {
                    balle.sauveParcourtEtReinitStack();
                    if (balle.isAEssayeChaqueScore()) {
                        //System.out.println("TROUVE!");
                        return new BallEtMap(balle,rowsCopie);
                    }
                    else return reesayeAvecPlusPetitScore(balleOriginale, rowsOriginal, trou, strategieDirections, balle);
                }
                iddirections = 0;
                direction = strategieDirections.get(iddirections);
            }
            iddirections++;
            if (balle.score==-1 || isToutesLesDirectonsOntJoue(strategieDirections, iddirections)) {
                String lastDirection = balle.getLastDirection();
                iddirections = sauteIdDirectionPrecedent(strategieDirections, lastDirection);
                balle.ajouteStackDeblocage(rowsCopie);
                if (isNaPasEchoue(balle, lastDirection)) {
                    return new BallEtMap(balle,rowsCopie);
                }
                else rebrousseChemin(balle, getOppose(lastDirection));
                printChemin(rowsCopie,balle,trou);
            }
            if (isAfaitCetteSerieDeDirections(strategieDirections, iddirections)) iddirections=0;
        }
        return new BallEtMap(balle,rowsCopie);
    }

    private BallEtMap reesayeAvecPlusPetitScore(Ball balleOriginale, List<String> rowsOriginal, Trou trou, List<String> strategieDirections, Ball balle) throws StrategiePerdante {
        //System.out.println("NOUVELLE RECHERCHE MEMORISEE PLUS COURTE");
        balle.decrementeScoreDessai();
        Ball copieOriginaleEtExperience = Ball.copieExperience(balle,balleOriginale);
        return rechercheMemorisee(copieOriginaleEtExperience, rowsOriginal, trou, strategieDirections);
    }

    private void avanceBalleDansDirection(Ball balle, ArrayList<String> rowsCopie, String direction) {
        changeCharAt(rowsCopie, balle.x, balle.y, direction);
        changeBallPosition(balle, direction, rowsCopie, new Trou());
        balle.ajouteChemin(direction);
    }

    private boolean isAfaitCetteSerieDeDirections(List<String> strategieDirections, int iddirections) {
        return iddirections > strategieDirections.size() - 1;
    }

    private int sauteIdDirectionPrecedent(List<String> strategieDirections, String lastDirection) {
        int iddirections;
        iddirections = strategieDirections.indexOf(lastDirection) + 1;
        return iddirections;
    }

    private boolean isNaPasEchoue(Ball balle, String lastDirection) throws StrategiePerdante {
        if (lastDirection.equals("0")) {
            if (balle.isATrouveChemin()) return true;
            throw new StrategiePerdante(balle);
        }
        return false;
    }

    private boolean isToutesLesDirectonsOntJoue(List<String> strategieDirections, int iddirections) {
        return iddirections > strategieDirections.size() - 1;
    }

    public static void changeCharAt(List<String> rows, int x, int y, String marque) {
        rows.set(y,changeCharAt(rows.get(y),x,marque));
    }

    private String getOppose(String direction) {
        if (direction.equals(">")) return "<";
        if (direction.equals("v")) return "^";
        if (direction.equals("<")) return ">";
        else return "v";
    }

    public void changeBallPosition(Ball balle, String direction, List<String> rows, Trou trouCible){
        if (isBallCanMoove(balle, direction, rows, trouCible)) balle.decrementeScore();
        if (canMooveRight(balle, direction, rows, trouCible)) balle.x++;
        if (canMooveLeft(balle, direction, rows, trouCible)) balle.x--;
        if (canMooveDown(balle, direction, rows, trouCible)) balle.y++;
        if (canMooveUp(balle, direction, rows, trouCible)) balle.y--;
    }

    public void rebrousseChemin(Ball balle, String direction){
        balle.invaliderLeCheminComplet();
        balle.removeLastStep();
        if (direction.equals(">")) balle.x++;
        if (direction.equals("<")) balle.x--;
        if (direction.equals("v")) balle.y++;
        if (direction.equals("^")) balle.y--;
        balle.incrementeScore();
    }
    private boolean isBallCanMoove(Ball balle, String direction, List<String> rows, Trou trouCible) {
        if (balle.score==-1) return false;
        return canMooveDown(balle, direction, rows,trouCible) || canMooveLeft(balle, direction,rows,trouCible) || canMooveRight(balle, direction, rows,trouCible) || canMooveUp(balle, direction,rows,trouCible);
    }

    private boolean canMooveUp(Ball balle, String direction, List<String> rows, Trou trouCible) {
        return direction.equals("^") && balle.y > 0 &&
                isValidDest(balle, balle.x,balle.y-1, rows, trouCible);
    }

    private boolean canMooveDown(Ball balle, String direction, List<String> rows, Trou trouCible) {
        return (direction.equals("v") && balle.y < rows.size()-1 &&
                isValidDest(balle,balle.x,balle.y+1, rows,trouCible));
    }

    private boolean isValidDest(Ball balle, int x, int y, List<String> rows, Trou trouCible) {
        if (isResolvedTrouInThisPosition(x,y)) return false;
        return identifie(rows, x, y) == '.' || identifie(rows, x, y) == 'X' || (identifie(rows, x, y) == 'H' && trouCible.x==x && trouCible.y==y);

    }

    private boolean isResolvedTrouInThisPosition(int x,int y) {
        return resolvedTrous.stream().filter(trou -> trou.x==x&&trou.y==y).collect(Collectors.toList()).size()>0;
    }

    private boolean canMooveLeft(Ball balle, String direction, List<String> rows, Trou trouCible) {
        return direction.equals("<") && balle.x > 0 &&
                isValidDest(balle, balle.x-1,balle.y, rows, trouCible);
    }

    private boolean canMooveRight(Ball balle, String direction, List<String> rows, Trou trouCible) {
        return direction.equals(">") && rows.get(0).length()-1 > balle.x
                &&
                isValidDest(balle, balle.x+1,balle.y, rows, trouCible);
    }

    private int getWith(String dimensions) {
        return Integer.parseInt(dimensions.split(" ")[0]);
    }

    public List<Ball> getBallesFromRow(String row, int y) {
        List<Ball> balles=new ArrayList();
        List<Character> listDeChars = row.chars().mapToObj(c -> (char) c).collect(Collectors.toList());
        IntStream.range(0, listDeChars.size())
                .forEach(x -> {
                    Character valeurDeLaCase = listDeChars.get(x);
                    if(Character.isDigit(valeurDeLaCase)) {
                    int scoreBalle = Integer.parseInt(Character.toString(valeurDeLaCase));
                    balles.add(new Ball(scoreBalle,x,y));
                }
                });
        return balles;
    }

    public char identifie(List<String> rows, int x, int y) {
        if (x<0 || y<0 ||y>=rows.size() ||x>=rows.get(0).length()) return 'E';
        return rows.get(y).charAt(x);
        /*return rows.get(0)y > 0 && x > 0 && resultRows.get(y).charAt(x - 1) == droite;
                || (y<resultRows.size()-1 && resultRows.get(y).charAt(x +1)=='<')
                || (y>0 && resultRows.get(y-1).charAt(x)=='v')
                || (y<resultRows.size()-1 && resultRows.get(y+1).charAt(x)=='^')) return true;*/
    }

    public List<Ball> trouverBalles(List<String> rows) {
        List<Ball> res =  new ArrayList<>();
        for(int yPos=0; yPos<rows.size(); yPos++){
            List<Ball> balles = getBallesFromRow(rows.get(yPos),yPos);
            res.addAll(balles);
        }
        return res;
    }

    public static String changeCharAt(String str, int at, String by) {
        if (at==0) return by.concat(str.substring(1));
        if (at==str.length()) return str.substring(0,at-1).concat(by).concat(str.substring(at));
        return str.substring(0,at).concat(by).concat(str.substring(at+1));
    }


    public List<List<CouplesBalleTrouCombines.CoupleBalleTrou>> definirTousLesCouplesBalleTrou(List<String> initialMap) throws TrouNonTrouveException, JeuIncompletException {
        CouplesBalleTrouCombines couplesBalleTrou = new CouplesBalleTrouCombines();
        List<Ball> balles = trouverBalles(initialMap);
        List<Trou> trous = trouveTrous(initialMap);
        if (trous.size()!=balles.size()) throw new JeuIncompletException();
        couplesBalleTrou.combinerDeuxsens(balles, trous);
        return couplesBalleTrou.toutJeuxCouples;
    }


    public List<String> initialiserJeu(List<String> rows) throws TrouNonTrouveException, JeuIncompletException, NonResoluException {
        reinitialiserStrategies();
        initialiserToutesLesStrategiesDeDeplacement();
        combinaisoncouples = definirTousLesCouplesBalleTrou(rows);
        if (initialMap==null) initialMap= new ArrayList(Arrays.asList(rows.toArray()));
        List<String> resAvecLacs = jouerChaqueCouple(rows);
        return enleverLacs(resAvecLacs);
    }

    public List<String> enleverLacs(List<String> resAvecLacs) {
        try {
            List<Trou> lacs = trouveLacs(resAvecLacs);
            lacs.stream().forEach(l -> {removeThisTrouFromMap(resAvecLacs, l);});
            return resAvecLacs;
        } catch (TrouNonTrouveException e) {
            return resAvecLacs;
        }
    }

    public void initialiserToutesLesStrategiesDeDeplacement() {
        CombinaisonBlock combinaison = new CombinaisonBlock("", new ArrayList(Arrays.asList("v,>,^,<".split(","))));
        strategies= combinaison.getToutesCombinaisonsString();
    }

    private void toutRecommencerAvecDifferentsCouples() throws NonResoluException {
        resolvedTrous.clear();
        combinaisoncoupleNbr++;
        if (combinaisoncoupleNbr>combinaisoncouples.size()-1) throw new NonResoluException();
        //System.out.println("CHANGER COUPLES "+combinaisoncouples.get(combinaisoncoupleNbr));
    }
    private List<String> jouerChaqueCouple(List<String> rows) throws TrouNonTrouveException, JeuIncompletException, NonResoluException {
        List<String> nouveauPlanResolu = null;
        ArrayList<String> copieOriginal = new ArrayList(rows);
        try {
            List<CouplesBalleTrouCombines.CoupleBalleTrou> couples = combinaisoncouples.get(combinaisoncoupleNbr);
            for (CouplesBalleTrouCombines.CoupleBalleTrou couple:couples) {
                Ball copieBalle = Ball.createNewInstance(couple.balle);
                nouveauPlanResolu = getPath(copieBalle, rows, couple.trou);
                printChemin(nouveauPlanResolu,copieBalle,couple.trou);
                reinitialiserStrategies();
            }
            return nouveauPlanResolu;
        } catch (ToutRefaireAvecNouveauxCouples e) {
            reinitialiserStrategies();
            toutRecommencerAvecDifferentsCouples();
            return jouerChaqueCouple(copieOriginal);
        }
    }



    private void reinitialiserStrategies() {
        strategieNumber=0;
    }

    private boolean isRestEncoreTrous(List<String> res) {
        boolean trouexist = false;
        try {
            return trouveTrous(res).size() > 0;
        } catch (TrouNonTrouveException e) {
            return false;
        }
    }

    public void printChemin(List<String> rows, Ball balle, Trou trou) {
        ArrayList rowsToPrint = new ArrayList(Arrays.asList(rows.toArray()));
        //System.out.println("stack de la balle "+ balle.imprimeStak());
        changeCharAt(rowsToPrint,trou.x,trou.y,"T");
        changeCharAt(rowsToPrint,balle.x,balle.y,"B");
        printrowsArray(rowsToPrint);
    }
    public void printChemin(List<String> rows) {
        ArrayList rowsToPrint = new ArrayList(Arrays.asList(rows.toArray()));
        printrowsArray(rowsToPrint);
    }

    private void printrowsArray(ArrayList rowsToPrint) {
        //System.out.println("-----");
       // rowsToPrint.forEach(System.out::println);
        //System.out.println("-----");
    }
    public void printrowsArrayCodinggame(List<String> rowsToPrint) {
        rowsToPrint.forEach(System.out::println);
    }

}
 class Trou {
    public Integer y=0;
    public Integer x=0;

    public Trou(Integer[] hPosition) {
        this.x=hPosition[0];
        this.y=hPosition[1];
    }

    public Trou() {
    }

    @Override
    public boolean equals(Object o)
    {
        if(this.x==((Ball)o).x && this.y==((Ball)o).y)  return true;
        return false;
    }

    @Override
    public String toString() {
        return "Trou{" +
                "x=" + x+
                ", y=" + y +
                '}';
    }
}

class CouplesBalleTrouCombines {
    public List<List<CoupleBalleTrou>> toutJeuxCouples= new ArrayList<>();
    private int jeuNumero=0;
    private int ballenbr=0;
    private int trounbr=0;


    public void combinerDeuxsens(List<Ball> balles, List<Trou> trous) {
        combiner(balles, trous);
        Deque<Trou> trouInverses =trous.stream().collect(Collector.of(ArrayDeque::new,(deq, t) -> deq.addFirst(t),(d1, d2) -> { d2.addAll(d1); return d2; }));
        combiner(balles, new ArrayList<>(trouInverses));
        jeuNumero=0;
    }

    private void combiner(List<Ball> balles, List<Trou> trous) {
        int nbrCouplesUnJeu= balles.size();
        int nombreCombinaisons=0;
        while (nombreCombinaisons< balles.size()* trous.size()) {
            nombreCombinaisons++;
            if (ballenbr >= nbrCouplesUnJeu) {
                ballenbr = 0;
                jeuNumero++;
                trounbr++;
                if (trounbr >= nbrCouplesUnJeu) trounbr = 0;
            }
            if (toutJeuxCouples.size() <= jeuNumero) toutJeuxCouples.add(new ArrayList<>());
            List<CoupleBalleTrou> jeudeCouples = toutJeuxCouples.get(jeuNumero);
            jeudeCouples.add(new CoupleBalleTrou(balles.get(ballenbr), trous.get(trounbr)));
            ballenbr++;
            trounbr++;
            if (trounbr >= nbrCouplesUnJeu) trounbr = 0;
        }
    }


    public class CoupleBalleTrou {
    public final Trou trou;
    public final Ball balle;

    public CoupleBalleTrou(Ball ball, Trou trou) {
        this.balle = ball;
        this.trou = trou;
    }
    @Override
    public String toString() {
        return "CoupleBalleTrou{balle=" + balle.x +","+balle.y+",trou=" + trou.x+","+trou.y +'}';
    }
}
}
class Ball {
    public int scoreDecrementalDessai;
    public int score;
    public int x;
    public int y;
    private Stack<String> stackDirection= new Stack();
    private List<String> stackDirectionsFound = new ArrayList<>();
    private LinkedList<Integer[]> blocageQueue = new LinkedList<>();
    private List<String> invalidPaths = new ArrayList<>();

    public Ball(int scoreBalle, int x, int y) {
        this.score=scoreBalle;
        this.scoreDecrementalDessai =scoreBalle;
        this.x= x;
        this.y=y;
    }

    public Ball() {

    }

    public String removeLastStep() {
        try {
            String prev = this.stackDirection.pop();
            return prev;
        } catch (Exception e) {
            return "0";
        }
    }
    public String getLastDirection() {
        try {
            String prev = this.stackDirection.peek();
            return prev;

        } catch (Exception e) {
            return "0";
        }
    }

    public String getCheminParcouruLePlusCourt() {
        String winnerPath="";
        for (int i = 0; i< stackDirectionsFound.size(); i++)
        {
            if (winnerPath.length()==0) winnerPath= stackDirectionsFound.get(i);
            if (stackDirectionsFound.get(i).length()<winnerPath.length()) winnerPath= stackDirectionsFound.get(i);
        }
        return winnerPath;
    }

    private String stackToString() {
        return stackDirection.stream().reduce((first, second) -> first.concat(second)).get();
    }

    public void ajouteChemin(String direction) {
        this.stackDirection.push(direction);
    }

    public void decrementeScore() {
        score--;
    }

    public void incrementeScore() {
        score++;
    }

    public boolean isAEssayeChaqueScore() {
        return this.scoreDecrementalDessai <1;
    }

    public void sauveParcourtEtReinitStack() {
        this.stackDirectionsFound.add(stackToString());
        this.stackDirection=new Stack<>();
    }

    public void decrementeScoreDessai() {
        scoreDecrementalDessai--;
        score=scoreDecrementalDessai;
    }

    public void ajouteStackDeblocage(ArrayList<String> rowsCopie) {
        MapAnalyzer.changeCharAt(rowsCopie, x, y, "O");
        addBlocage(rowsCopie,x,y);
    }

    private void addBlocage(ArrayList<String> rowsCopie,int x, int y) {
        if (blocageQueue.size()>2) deleteFirstBlocage(rowsCopie);
        blocageQueue.add(new Integer[]{x,y});
    }

    private void deleteFirstBlocage(ArrayList<String> rowsCopie) {
        Integer[] oldBlocage = blocageQueue.removeFirst();
        MapAnalyzer.changeCharAt(rowsCopie, oldBlocage[0], oldBlocage[1], ".");
    }

    public static Ball createNewInstance(Ball ball) {
        Ball ret = new Ball();
        ret.x=ball.x;
        ret.y=ball.y;
        ret.score=ball.score;
        ret.scoreDecrementalDessai=ball.scoreDecrementalDessai;
        ret.stackDirection=(Stack<String>) ball.stackDirection.clone();
        ret.stackDirectionsFound= new ArrayList(Arrays.asList(ball.stackDirectionsFound.toArray()));
        ret.invalidPaths= new ArrayList(Arrays.asList(ball.invalidPaths.toArray()));
        return ret;
    }

    public static Ball copieExperience(Ball Actualballe, Ball originalBalle) {
        Ball copieOriginale = createNewInstance(originalBalle);
        List<String> stackDirectionLePlusCourt = new ArrayList<>();
        stackDirectionLePlusCourt.add(Actualballe.getCheminParcouruLePlusCourt());
        copieOriginale.stackDirectionsFound=stackDirectionLePlusCourt;
        copieOriginale.scoreDecrementalDessai=Actualballe.scoreDecrementalDessai;
        copieOriginale.score=Actualballe.scoreDecrementalDessai;
        copieOriginale.stackDirection=new Stack<>();
        copieOriginale.invalidPaths=new ArrayList<>();
        return copieOriginale;
    }

    public boolean isATrouveChemin() {
        return stackDirectionsFound.size()>0;
    }

    public void invaliderLeCheminComplet() {
        if (score==-1) {
            invalidPaths.add(stackToString());
            //System.out.println("invalider "+stackToString()+ " scoreDecremental "+this.scoreDecrementalDessai);
            //System.out.println("");
        }
    }

    public List<String> getInvalidPaths() {
        return this.invalidPaths;
    }

    public void setInvalidPaths(List<String> invalidPaths) {
        this.invalidPaths=invalidPaths;
    }


    public boolean isTourneEnRond() {
        Set set = new HashSet() ;
        set.addAll(this.invalidPaths) ;
        return this.invalidPaths.size()!=set.size();
    }
    @Override
    public boolean equals(Object o)
    {
        if(this.x==((Ball)o).x && this.y==((Ball)o).y)  return true;
        return false;
    }

    public void resetInvalidPaths() {
        this.invalidPaths=new ArrayList<>();
    }

    public String imprimeStak() {
        return stackDirection.toString();
    }

    @Override
    public String toString() {
        return "Ball{" +
                "x=" + x +
                ", y=" + y +
                '}';
    }
}

class ToutRefaireAvecNouveauxCouples extends Exception {
}

class TrouNonTrouveException extends Exception {
    public TrouNonTrouveException(String chemin_interdit) {
        super(chemin_interdit);
    }

    public TrouNonTrouveException() {

    }
}
class NonResoluException extends Exception {
}
 class StrategiePerdante extends Exception {
    private Ball ballWithInvalidPaths;

    public Ball getBallWithInvalidPaths() {
        return this.ballWithInvalidPaths;
    }
    StrategiePerdante(Ball balle)
    {
        this.ballWithInvalidPaths=balle;
    }
}

class BallEtMap {
    private final ArrayList<String> rows;
    private final Ball balle;

    public BallEtMap(Ball balle, ArrayList<String> rowsCopie) {
        this.balle=balle;
        this.rows=rowsCopie;
    }


    public Ball getBalle() {
        return balle;
    }

    public ArrayList<String> getRows() {
        return this.rows;
    }

    public String getCheminLePlusCourt() {
        return this.balle.getCheminParcouruLePlusCourt();

    }
}
class JeuIncompletException extends Exception {
}
class CombinaisonBlock {
    public String prefix="";
    public List<String> reste=new ArrayList<>();

    public CombinaisonBlock(String character, List<String> reste) {
        this.prefix=character;
        this.reste = reste;
    }

    public List<CombinaisonBlock> combiner() {
        if (this.reste.size()==0) return Arrays.asList(new CombinaisonBlock[] {this});
        List<CombinaisonBlock> res = new ArrayList();
        for (int i=0; i<this.reste.size(); i++){
            String comma = this.prefix.length()==0?"":",";
            String newprefix=this.prefix.concat(comma+this.reste.get(i));
            ArrayList reste2 = new ArrayList(Arrays.asList(reste.toArray()));
            reste2.remove(i);
            res.add(new CombinaisonBlock(newprefix,reste2));
        }
        return res;
    }

    public List<CombinaisonBlock> getToutesCombinaisons(){
        List<CombinaisonBlock> resultatFinal = new ArrayList<>();
        resultatFinal.add(this);
        int previousSize =0;
        while (resultatFinal.size()!=previousSize){
            int iterateur=0;
            previousSize=resultatFinal.size();
            while (iterateur<previousSize) {
                CombinaisonBlock parent = resultatFinal.get(0);
                resultatFinal.remove(parent);
                resultatFinal.addAll(parent.combiner());
                iterateur++;
            }
        }
        return resultatFinal;
    }

    @Override
    public String toString() {
        return "CombinaisonBlock{" +
                "prefix='" + prefix + '\'' +
                '}';
    }

    public List<String> getToutesCombinaisonsString() {
        return this.getToutesCombinaisons().stream().map(c->c.prefix).collect(Collectors.toList());
    }
}
